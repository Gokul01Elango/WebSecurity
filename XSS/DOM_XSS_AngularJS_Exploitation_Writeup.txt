
Lab Write-Up: DOM XSS in AngularJS Expression

Objective:
Exploit a DOM-based Cross-Site Scripting (XSS) vulnerability in an AngularJS application, where angle brackets and double quotes are HTML-encoded.

Background:
AngularJS expressions ({{ }}) are powerful for dynamic content but can be dangerous if user inputs are not properly sanitized. This lab demonstrates exploiting such a vulnerability.

Tools Required:
- A web browser (e.g., Chrome, Firefox)
- Understanding of JavaScript and AngularJS

Steps to Exploit:

Step 1: Analyzing the Application
1. Inspect the Search Functionality: 
   - Navigate to the search feature in the application.
   - Notice how user inputs are reflected in the application's response.

Step 2: Crafting the Payload
1. Understanding AngularJS Evaluation: 
   - Recognize that AngularJS can evaluate complex expressions.
   - Remember that standard script injections won't work due to HTML encoding.

2. Creating the XSS Payload: 
   - Use a payload that utilizes AngularJS's ability to evaluate JavaScript expressions.
   - Example Payload: {{constructor.constructor('alert(1)')()}}
     - This payload uses AngularJS's scope and JavaScript's constructor function to create and execute a new function.

Step 3: Executing the Attack
1. Inputting the Payload:
   - Enter the crafted payload into the search box.
   - Submit the search query.

2. Observing the Outcome:
   - If vulnerable, the AngularJS application evaluates the expression.
   - An alert box with 1 should appear, indicating successful exploitation.

Conclusion:
This exercise demonstrates the importance of proper input sanitization in web applications, especially when using frameworks like AngularJS that provide dynamic evaluation features. The lab also highlights the need for security-aware development practices to prevent such vulnerabilities.

Post-Exploitation Recommendations:
- Sanitize User Inputs: Ensure all user inputs are properly sanitized before including them in any dynamic evaluation context.
- Content Security Policy (CSP): Implement CSP headers to mitigate the impact of XSS attacks.
- Regular Code Audits: Conduct regular security reviews and audits of the codebase to identify and rectify potential vulnerabilities.
